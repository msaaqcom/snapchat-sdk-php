<?php

declare(strict_types=1);

/**
 * ResponseLogsLog
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Snap Conversions API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SnapBusinessSDK\Model;

use ArrayAccess;
use SnapBusinessSDK\ObjectSerializer;

/**
 * ResponseLogsLog Class Doc Comment
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ResponseLogsLog implements \JsonSerializable, ArrayAccess, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'response_logs_log';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'timestamp' => 'string',
        'event_type' => 'string',
        'event_conversion_type' => 'string',
        'status' => 'string',
        'integration' => 'string',
        'event_metadata' => '\SnapBusinessSDK\Model\CapiEvent',
        'error_records' => 'string[]',
        'warning_records' => 'string[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'timestamp' => null,
        'event_type' => null,
        'event_conversion_type' => null,
        'status' => null,
        'integration' => null,
        'event_metadata' => null,
        'error_records' => null,
        'warning_records' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'event_type' => 'event_type',
        'event_conversion_type' => 'event_conversion_type',
        'status' => 'status',
        'integration' => 'integration',
        'event_metadata' => 'event_metadata',
        'error_records' => 'error_records',
        'warning_records' => 'warning_records',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'event_type' => 'setEventType',
        'event_conversion_type' => 'setEventConversionType',
        'status' => 'setStatus',
        'integration' => 'setIntegration',
        'event_metadata' => 'setEventMetadata',
        'error_records' => 'setErrorRecords',
        'warning_records' => 'setWarningRecords',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'event_type' => 'getEventType',
        'event_conversion_type' => 'getEventConversionType',
        'status' => 'getStatus',
        'integration' => 'getIntegration',
        'event_metadata' => 'getEventMetadata',
        'error_records' => 'getErrorRecords',
        'warning_records' => 'getWarningRecords',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['event_type'] = $data['event_type'] ?? null;
        $this->container['event_conversion_type'] = $data['event_conversion_type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['integration'] = $data['integration'] ?? null;
        $this->container['event_metadata'] = $data['event_metadata'] ?? null;
        $this->container['error_records'] = $data['error_records'] ?? null;
        $this->container['warning_records'] = $data['warning_records'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param  string|null  $timestamp  timestamp
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param  string|null  $event_type  event_type
     * @return self
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets event_conversion_type
     *
     * @return string|null
     */
    public function getEventConversionType()
    {
        return $this->container['event_conversion_type'];
    }

    /**
     * Sets event_conversion_type
     *
     * @param  string|null  $event_conversion_type  event_conversion_type
     * @return self
     */
    public function setEventConversionType($event_conversion_type)
    {
        $this->container['event_conversion_type'] = $event_conversion_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param  string|null  $status  status
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return string|null
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param  string|null  $integration  integration
     * @return self
     */
    public function setIntegration($integration)
    {
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets event_metadata
     *
     * @return \SnapBusinessSDK\Model\CapiEvent|null
     */
    public function getEventMetadata()
    {
        return $this->container['event_metadata'];
    }

    /**
     * Sets event_metadata
     *
     * @param  \SnapBusinessSDK\Model\CapiEvent|null  $event_metadata  event_metadata
     * @return self
     */
    public function setEventMetadata($event_metadata)
    {
        $this->container['event_metadata'] = $event_metadata;

        return $this;
    }

    /**
     * Gets error_records
     *
     * @return string[]|null
     */
    public function getErrorRecords()
    {
        return $this->container['error_records'];
    }

    /**
     * Sets error_records
     *
     * @param  string[]|null  $error_records  error_records
     * @return self
     */
    public function setErrorRecords($error_records)
    {
        $this->container['error_records'] = $error_records;

        return $this;
    }

    /**
     * Gets warning_records
     *
     * @return string[]|null
     */
    public function getWarningRecords()
    {
        return $this->container['warning_records'];
    }

    /**
     * Sets warning_records
     *
     * @param  string[]|null  $warning_records  warning_records
     * @return self
     */
    public function setWarningRecords($warning_records)
    {
        $this->container['warning_records'] = $warning_records;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int|null  $offset  Offset
     * @param  mixed  $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
